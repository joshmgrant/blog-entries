Following along the lines of a *previous post* [http://simplythetest.tumblr.com/post/101510895625/slow-is-smooth-smooth-is-fast], I've been thinking lately about VCS workflows using Git. One thing that I've been considering is working off main branches directly versus feature branching. 

Based on a *great response I received on Programmers StackExchange*, [http://programmers.stackexchange.com/a/255174/36853]  I'm now of the opinion that (largely speaking) working directly on master should be considered dangerous. These kind of workflows are described *here* [http://blog.endpoint.com/2014/05/git-workflows-that-work.html] in the "master only workflow" section.

I will say up front that there are cases when master only workflows make sense. Some I can think of would be

- Small projects with only one or two developers
- Projects that are structured such that most changes do not affect other ones
- Projects where changes are small and infrequent

There could be other situations as well; these I just came up with. These are also true for strict definitions of the terms "small", "most" and "infrequent". Even a moderately complex personal project would probably not satisfy these conditions. 

Largely speaking, however, I think the rule of master only workflows should be "Not even once."

Some reasons why:

- Pulling become problematic: Keeping a repository up to date and keeping current work up to date are both important. When working on a single master branch, these two concepts become inseparable; keeping up local work up to date /is/ keeping a repo up to date. This means that getting the latest code /requires/ developers to face incoming changes and conflicts, ready or not. Working on a feature branch helps avoid this problem in a straightforward way.
- Pushing becomes problematic: Along with keeping work up to date, sending work back to remote servers can also complicated in a master only workflow. Since all work is on a single branch, all of that work (eventually) has to be pushed back to the remote. This may include commits with broken or unfinished work. It also means that work is always a single push away from going back to the server, regardless of its state. 
- Workarounds ahoy!: In light of these shortcomings - and they are big ones - developers will find workarounds avoid catastrophic issues. These may include making liberal use of rebasing to collapse commits to manageable sizes, adding hooks to prevent receiving or sending bad code, and temporary code holders like git stash. All of these will work in a variety of situations to help the master only workflow, and all are usually more complicated than using branching in the first place. Sometimes these workarounds can lead to even stickier situations than the problems they try to prevent.

In modern DVCS like Git (and probably Mercurial), branching is quick and easy. This is a feature, not a bug. Even merging, which can be more difficult than branching, is designed to be straightforward and fast.

So unless you really know what you're doing to, just say no to master only workflows.