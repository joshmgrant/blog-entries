I've been thinking about writing a post like this for a while but JB Rainsberger has forced my hand. 

JB [recently tweeted](https://twitter.com/jbrains/status/737265852131741696) about some of the downsides to writing for-loops. As usual, his thoughts were well reasoned and insightful. It's true that run-of-the-mill for-loops obscure programmer intent, and in terms of programming tools there are often better approaches.

But I want to be clear about something: I _love_ for-loops. Sometimes I wonder if they literally make the world tick. 

For-loops are one of the first things that most people encounter when they start programming. This is true if someone learns to program for work, for school or for their own amusement. It can remember for-loops being one of the first flow control constructs I ever saw. At the time, I didn't think of much of them as they seemed almost obvious. But over time, I've come to appreciate - even adore - the humble for-loop.

Why so much love? Because lots of code is one-off scripting code. 

The first programming I did was for academic research. The first project I worked on was in Perl to scrape public data from Securities and Exchange Commission for corporate structure research in my undergrad. My  next project was my master's thesis, which consisted in part of work based on simulations of populations playing Prisoner's Dilemmas in C. In both cases, my work was essentially one or two for-loops that contained some non-trivial logic. These scripts were hugely important to the research work I did, and for the most part the scripts worked well and in reality, I was the only person to ever need to work with or run these scripts.

Code written by academics and students for research is often in this form: a short-ish program (under 200 lines in a single file) run directly by a one or two people. Overall, there's a lot of code written for this purpose. Most academics working in fields such as the natural sciences and engineering have probably have written code like this at one time or another. Maintenance is minimal since most scripts are single purpose and kept by one person. Extensibility isn't required and there's no formal documentation since only the author sees the code and output. And to cap it off, for-loops are basic, first-class constructs in almost all mainstream programming languages, meaning no third-party libraries need to be imported or maintained. A for-loop written in FORTRAN twenty-five years ago will run the same today as it did then, as will one written in Java three years ago.

I'm sure there are similar scripts written by programmers and IT personel. I've written quick scripts to accomplish tasks like replacing names in files over the years, and they tend to be one big for-loop. 

When maintenance isn't a huge concern, for-loops really shine. They're a straightforward application of automation, something computers do really well. At their most basic, for-loops are a construct that say "Repeat this block of code a specifc number of times". This number can be hard coded or pulled from somewhere else. 