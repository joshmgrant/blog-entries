Yesterday, I mused about *how justifying automation can make it more effective* [http://simplythetest.tumblr.com/post/112159787720/less-is-more-with-automation]. 

I'd like to go one step further: I think this applies to /all/ software. In other words, all pieces of software projects should be justified before being used. 

Before you start throwing full wine bottles at the screen, here's my anecdotal story: 

I recently got a new Samsung S4. It's a snazzy phone with a relatively up-to-date version of Android (4.4) and a bunch of apps and features. It's fast and smooth. One the apps it has by default is a notepad app that essentially allows me to create, edit and delete short notes. Despite this, whenever I make a grocery list - which I do often - I write it on a Post-It note and attach it to the back of my phone. Why? 

The Post-It works great. It's attached to my phone so I don't lose it when I'm going to the grocery store. I can easily scratch out items I don't need, or add items I do need. Since editing the list at the store is unnecessary, the read-only nature on the outside of my phone is a plus. 

On the other hand, I've tried using the notepad apps, and I find it awkward. Reading and editing lists mean taking out my phone, unlocking it and going to the app. Making random insertions or edits is slightly awkward. It also doesn't feel as easy to use as the Post-It. 

In my mind, for this task the notepad app is not justified. The Post-It is a better solution, no software is needed. I could try to "get into" using the app, forcing myself to use it. I could also try other apps. But the best solution is to keep using the Post-It. It's proven and fail-safe. 

A lot of software is built to solve a problem, but often times it's either not needed or doesn't solve the problem as well as other approaches. When a kludge starts to feel like a kludge, the end is near. That's why the best software projects are justified.