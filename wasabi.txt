I have to blog about this. 

Today, I found a post saying that FogBugz - a popular project management app for software teams - has *stopped using its in-house proprietary programming language Wasabi* [http://blog.fogcreek.com/killing-off-wasabi-part-1/]. 

TL;DR: This whole story should be a case study in CS and software engineering programs everywhere. 

The back story is fairly straightforward. FogBugz was an application first written for Windows in the early 2000s. Because it written on a Windows platform, it was written mainly in VBScript, a scripting language on Windows machines. In 2005, the decision was made to build FogBugz for Linux platforms as well. Since VBScript was no longer an option for development on Linux, a decision had to be made to remedy this problem. The decision was to write a custom programming language called Wasabi using a custom compiler written in C#. 

One of the main individuals at FogBugz working on these projects was the well-known *Joel Spolsky* [http://www.joelonsoftware.com/]. He's a software developer who's worked at Microsoft and elsewhere and has written blog posts how seen as classics by some in the software development community.  One of his more famous posts talks about big re-writes and how they are *largely a bad idea* [http://www.joelonsoftware.com/articles/fog0000000069.html]. As porting FogBugz from Windows to Linux could've merited a "big re-write", Joel was a proponent of using a custom language to avoid writing new code and reuse existing code. 

After ten years, the result of this decision was the abandon Wasabi altogether. I can't say I'm surprised. 

What makes this story so fascinating is that it's a great example of a software development failure and it's mostly public. There are posts by Joel of his *decision* [http://www.joelonsoftware.com/items/2006/09/01.html] *to use* [http://www.joelonsoftware.com/items/2006/09/01b.html] Wasabi as well as *critiques from his peers* [http://blog.codinghorror.com/has-joel-spolsky-jumped-the-shark/]. This was around ten years ago, when the software world was quite different, but some of the points are still relevant now (and will be for the foreseeable future). As well, this might be a /software development/ failure, but not a /business/ failure; FogBugz is still around and making money, perhaps even some directly due to the decision to use a custom language. While Wasabi didn't kill off FogBugz, it probably made things more difficult for a longer time than expected. My guess is that there won't be much *lost love* [http://jacob.jkrall.net/wasabi-the-parts/introduction.html] for Wasabi from individuals at FogBugz.

With that setup, here's some things that have leapt out at me looking at this story: 

-Technical Decisions Are Social Decisions: The idea of developing a new compiler or programming language in order to reuse significant amounts of code is not a bad idea from a purely technical standpoint. It's really just creating a new tool to get over a speed-bump, and one that's basically a solved problem. But the social overhead of working with an in-house language can be enormous. Getting help on a particular issues is difficult because you can't use StackOverflow or hire an Senior Wasabi Developer with 5+ years experience. Similarly, when a developer leaves the company or team their knowledge isn't easily replaced since they may be the sole person anywhere with this knowledge. Training becomes challenging and longer because new devs need to be taught a new language and tooling on top of their other duties. Lastly, thanks to Conway's Law, an internally created programming language takes on all the quirks of the organization producing it, which becomes a big time suck. All of this probably made working with Wasabi a crappy experience for developers, creating a vicious cycle of the language getting worse leading to even crappier experiences. My guess is that this is the biggest reason Wasabi was removed. People hated it so much that any benefits it had were essentially ignored.

-Proprietary Closed-Source Languages Are Awful: I have some experience with this. My first programming job was working with the *4Test language* [http://sqa.fyicenter.com/FAQ/SilkTest/What_is_4Test_.html], a proprietary language created (originally) by Borland for writing UI automation scripts. While the language itself wasn't too bad, working with it on a daily basis was pretty tough. Searching online for resources was limited because there was basically no community outside of the language's vendor, Microfocus. Wasabi had these problems but an order of magnitude worse. With 4Test, at least Microfocus provided support and some training materials (for a fee). With Wasabi, FogBugz was on their own. 

Plus, because programming languages are such a core tool for developers to work with, even the slightest irks can cascade into blocking issues. One time working with 4Test I put an integer value into a conditional. How does 4Test evaluate that? I had no idea, there was no documentation. With mainstream languages, there's a formal spec or community understand to turn to. With 4Test, I guessed the functionality based on my experience and went from there. I had no other choice. Closed-sourced language tend to stagnate, with fixes and improvements being slow to arrive. Proprietary languages mean little to no community and little shared knowledge to tap into. Combine the two and it's where languages go to die.

-Language Design Is Hard

-One Person Can Make the Difference
